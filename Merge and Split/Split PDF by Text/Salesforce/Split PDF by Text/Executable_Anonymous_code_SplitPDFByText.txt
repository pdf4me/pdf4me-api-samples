// Complete test for SplitPDFByText with public URL

// Replace with your real ContentDocumentId
String pdfContentDocumentId = '069XXXXXXXXXXXXAAA';

// The text in the PDF to split on (must match exactly as in the PDF)
String textToSplitOn = 'YourSplitTextHere';

// Fetch the PDF file
ContentVersion cv = [
    SELECT VersionData
    FROM ContentVersion
    WHERE ContentDocumentId = :pdfContentDocumentId
    ORDER BY VersionNumber DESC
    LIMIT 1
];

// Encode PDF to base64
String pdfBase64 = EncodingUtil.base64Encode(cv.VersionData);

// Call the split method (basic parameters)
SplitPDFByText.SplitByTextResult result = SplitPDFByText.splitPDFByTextAndSave(
    pdfBase64,
    textToSplitOn, // text to search for
    'after',       // splitTextPage: 'after' or 'before'
    'split_{pageNumber}' // fileNaming
);

// Output result
System.debug('Base64 (first 100 chars): ' + (result.base64 != null ? result.base64.substring(0, Math.min(100, result.base64.length())) : null));
System.debug('Download URL: ' + result.downloadUrl);
System.debug('Error: ' + result.error);

// If a file was created, make it public and output the public URL
if (result.downloadUrl != null && result.downloadUrl.contains('/sfc/servlet.shepherd/document/download/')) {
    // Extract ContentDocumentId from the download URL
    String contentDocumentId = result.downloadUrl.substringAfterLast('/');
    String publicUrl = SplitPDFByText.makeFilePublic(contentDocumentId);
    System.debug('Public URL: ' + publicUrl);
}